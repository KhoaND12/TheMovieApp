//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Movie`.
    static let movie = _R.storyboard.movie()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Movie", bundle: ...)`
    static func movie(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.movie)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `color.F1CA23`.
    static let colorF1CA23 = Rswift.ColorResource(bundle: R.hostingBundle, name: "color.F1CA23")
    /// Color `color.bg.skeletonD3`.
    static let colorBgSkeletonD3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "color.bg.skeletonD3")
    /// Color `color.blue007AD9`.
    static let colorBlue007AD9 = Rswift.ColorResource(bundle: R.hostingBundle, name: "color.blue007AD9")
    /// Color `color.text4A`.
    static let colorText4A = Rswift.ColorResource(bundle: R.hostingBundle, name: "color.text4A")
    /// Color `color.text9B`.
    static let colorText9B = Rswift.ColorResource(bundle: R.hostingBundle, name: "color.text9B")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color.F1CA23", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorF1CA23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorF1CA23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color.bg.skeletonD3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBgSkeletonD3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBgSkeletonD3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color.blue007AD9", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlue007AD9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlue007AD9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color.text4A", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorText4A(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorText4A, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color.text9B", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorText9B(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorText9B, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color.F1CA23", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorF1CA23(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorF1CA23.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color.bg.skeletonD3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorBgSkeletonD3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorBgSkeletonD3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color.blue007AD9", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorBlue007AD9(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorBlue007AD9.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color.text4A", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorText4A(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorText4A.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color.text9B", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorText9B(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorText9B.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `bg.favorite`.
    static let bgFavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg.favorite")
    /// Image `icon.arrow.down`.
    static let iconArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.arrow.down")
    /// Image `icon.back`.
    static let iconBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.back")
    /// Image `icon.detail`.
    static let iconDetail = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.detail")
    /// Image `icon.loadMore`.
    static let iconLoadMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.loadMore")
    /// Image `icon.logo`.
    static let iconLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.logo")
    /// Image `icon.play.blue`.
    static let iconPlayBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.play.blue")
    /// Image `icon.play.white`.
    static let iconPlayWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.play.white")
    /// Image `icon.plus`.
    static let iconPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.plus")
    /// Image `icon.search`.
    static let iconSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.search")
    /// Image `icon.star.empty2`.
    static let iconStarEmpty2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.star.empty2")
    /// Image `icon.star.empty`.
    static let iconStarEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.star.empty")
    /// Image `icon.star.filled`.
    static let iconStarFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.star.filled")
    /// Image `icon.user`.
    static let iconUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon.user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg.favorite", bundle: ..., traitCollection: ...)`
    static func bgFavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgFavorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.arrow.down", bundle: ..., traitCollection: ...)`
    static func iconArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconArrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.back", bundle: ..., traitCollection: ...)`
    static func iconBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.detail", bundle: ..., traitCollection: ...)`
    static func iconDetail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDetail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.loadMore", bundle: ..., traitCollection: ...)`
    static func iconLoadMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLoadMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.logo", bundle: ..., traitCollection: ...)`
    static func iconLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.play.blue", bundle: ..., traitCollection: ...)`
    static func iconPlayBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlayBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.play.white", bundle: ..., traitCollection: ...)`
    static func iconPlayWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlayWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.plus", bundle: ..., traitCollection: ...)`
    static func iconPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.search", bundle: ..., traitCollection: ...)`
    static func iconSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.star.empty", bundle: ..., traitCollection: ...)`
    static func iconStarEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStarEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.star.empty2", bundle: ..., traitCollection: ...)`
    static func iconStarEmpty2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStarEmpty2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.star.filled", bundle: ..., traitCollection: ...)`
    static func iconStarFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStarFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon.user", bundle: ..., traitCollection: ...)`
    static func iconUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUser, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 17 nibs.
  struct nib {
    /// Nib `CategoryViewCell`.
    static let categoryViewCell = _R.nib._CategoryViewCell()
    /// Nib `CategoryViewSectionCell`.
    static let categoryViewSectionCell = _R.nib._CategoryViewSectionCell()
    /// Nib `MovieActorCell`.
    static let movieActorCell = _R.nib._MovieActorCell()
    /// Nib `MovieActorSectionCell`.
    static let movieActorSectionCell = _R.nib._MovieActorSectionCell()
    /// Nib `MovieDetailSkeletonView`.
    static let movieDetailSkeletonView = _R.nib._MovieDetailSkeletonView()
    /// Nib `MovieHeaderView`.
    static let movieHeaderView = _R.nib._MovieHeaderView()
    /// Nib `MovieInfoViewCell`.
    static let movieInfoViewCell = _R.nib._MovieInfoViewCell()
    /// Nib `MovieRateViewCell`.
    static let movieRateViewCell = _R.nib._MovieRateViewCell()
    /// Nib `MovieRecommedCell`.
    static let movieRecommedCell = _R.nib._MovieRecommedCell()
    /// Nib `MovieRecommendSectionCell`.
    static let movieRecommendSectionCell = _R.nib._MovieRecommendSectionCell()
    /// Nib `MovieReviewViewCell`.
    static let movieReviewViewCell = _R.nib._MovieReviewViewCell()
    /// Nib `MovieVideoCell`.
    static let movieVideoCell = _R.nib._MovieVideoCell()
    /// Nib `MovieVideoSectionCell`.
    static let movieVideoSectionCell = _R.nib._MovieVideoSectionCell()
    /// Nib `MovieViewCell`.
    static let movieViewCell = _R.nib._MovieViewCell()
    /// Nib `MovieViewSectionCell`.
    static let movieViewSectionCell = _R.nib._MovieViewSectionCell()
    /// Nib `TrendingViewCell`.
    static let trendingViewCell = _R.nib._TrendingViewCell()
    /// Nib `TrendingViewSectionCell`.
    static let trendingViewSectionCell = _R.nib._TrendingViewSectionCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryViewCell) instead")
    static func categoryViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryViewSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryViewSectionCell) instead")
    static func categoryViewSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryViewSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieActorCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieActorCell) instead")
    static func movieActorCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieActorCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieActorSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieActorSectionCell) instead")
    static func movieActorSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieActorSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieDetailSkeletonView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieDetailSkeletonView) instead")
    static func movieDetailSkeletonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieDetailSkeletonView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieHeaderView) instead")
    static func movieHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieInfoViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieInfoViewCell) instead")
    static func movieInfoViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieInfoViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieRateViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieRateViewCell) instead")
    static func movieRateViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieRateViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieRecommedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieRecommedCell) instead")
    static func movieRecommedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieRecommedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieRecommendSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieRecommendSectionCell) instead")
    static func movieRecommendSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieRecommendSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieReviewViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieReviewViewCell) instead")
    static func movieReviewViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieReviewViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieVideoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieVideoCell) instead")
    static func movieVideoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieVideoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieVideoSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieVideoSectionCell) instead")
    static func movieVideoSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieVideoSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieViewCell) instead")
    static func movieViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieViewSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieViewSectionCell) instead")
    static func movieViewSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieViewSectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrendingViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trendingViewCell) instead")
    static func trendingViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trendingViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TrendingViewSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.trendingViewSectionCell) instead")
    static func trendingViewSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trendingViewSectionCell)
    }
    #endif

    static func categoryViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryViewCell? {
      return R.nib.categoryViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryViewCell
    }

    static func categoryViewSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryViewSectionCell? {
      return R.nib.categoryViewSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryViewSectionCell
    }

    static func movieActorCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieActorCell? {
      return R.nib.movieActorCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieActorCell
    }

    static func movieActorSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieActorSectionCell? {
      return R.nib.movieActorSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieActorSectionCell
    }

    static func movieDetailSkeletonView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.movieDetailSkeletonView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieHeaderView? {
      return R.nib.movieHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieHeaderView
    }

    static func movieInfoViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieInfoViewCell? {
      return R.nib.movieInfoViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieInfoViewCell
    }

    static func movieRateViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRateViewCell? {
      return R.nib.movieRateViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRateViewCell
    }

    static func movieRecommedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRecommedCell? {
      return R.nib.movieRecommedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRecommedCell
    }

    static func movieRecommendSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRecommendSectionCell? {
      return R.nib.movieRecommendSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRecommendSectionCell
    }

    static func movieReviewViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieReviewViewCell? {
      return R.nib.movieReviewViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieReviewViewCell
    }

    static func movieVideoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieVideoCell? {
      return R.nib.movieVideoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieVideoCell
    }

    static func movieVideoSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieVideoSectionCell? {
      return R.nib.movieVideoSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieVideoSectionCell
    }

    static func movieViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieViewCell? {
      return R.nib.movieViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieViewCell
    }

    static func movieViewSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieViewSectionCell? {
      return R.nib.movieViewSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieViewSectionCell
    }

    static func trendingViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingViewCell? {
      return R.nib.trendingViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingViewCell
    }

    static func trendingViewSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingViewSectionCell? {
      return R.nib.trendingViewSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingViewSectionCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryViewCell`.
    static let categoryViewCell: Rswift.ReuseIdentifier<CategoryViewCell> = Rswift.ReuseIdentifier(identifier: "CategoryViewCell")
    /// Reuse identifier `CategoryViewSectionCell`.
    static let categoryViewSectionCell: Rswift.ReuseIdentifier<CategoryViewSectionCell> = Rswift.ReuseIdentifier(identifier: "CategoryViewSectionCell")
    /// Reuse identifier `MovieActorCell`.
    static let movieActorCell: Rswift.ReuseIdentifier<MovieActorCell> = Rswift.ReuseIdentifier(identifier: "MovieActorCell")
    /// Reuse identifier `MovieActorSectionCell`.
    static let movieActorSectionCell: Rswift.ReuseIdentifier<MovieActorSectionCell> = Rswift.ReuseIdentifier(identifier: "MovieActorSectionCell")
    /// Reuse identifier `MovieInfoViewCell`.
    static let movieInfoViewCell: Rswift.ReuseIdentifier<MovieInfoViewCell> = Rswift.ReuseIdentifier(identifier: "MovieInfoViewCell")
    /// Reuse identifier `MovieRateViewCell`.
    static let movieRateViewCell: Rswift.ReuseIdentifier<MovieRateViewCell> = Rswift.ReuseIdentifier(identifier: "MovieRateViewCell")
    /// Reuse identifier `MovieRecommedCell`.
    static let movieRecommedCell: Rswift.ReuseIdentifier<MovieRecommedCell> = Rswift.ReuseIdentifier(identifier: "MovieRecommedCell")
    /// Reuse identifier `MovieRecommendSectionCell`.
    static let movieRecommendSectionCell: Rswift.ReuseIdentifier<MovieRecommendSectionCell> = Rswift.ReuseIdentifier(identifier: "MovieRecommendSectionCell")
    /// Reuse identifier `MovieReviewViewCell`.
    static let movieReviewViewCell: Rswift.ReuseIdentifier<MovieReviewViewCell> = Rswift.ReuseIdentifier(identifier: "MovieReviewViewCell")
    /// Reuse identifier `MovieVideoCell`.
    static let movieVideoCell: Rswift.ReuseIdentifier<MovieVideoCell> = Rswift.ReuseIdentifier(identifier: "MovieVideoCell")
    /// Reuse identifier `MovieVideoSectionCell`.
    static let movieVideoSectionCell: Rswift.ReuseIdentifier<MovieVideoSectionCell> = Rswift.ReuseIdentifier(identifier: "MovieVideoSectionCell")
    /// Reuse identifier `MovieViewCell`.
    static let movieViewCell: Rswift.ReuseIdentifier<MovieViewCell> = Rswift.ReuseIdentifier(identifier: "MovieViewCell")
    /// Reuse identifier `TrendingViewCell`.
    static let trendingViewCell: Rswift.ReuseIdentifier<TrendingViewCell> = Rswift.ReuseIdentifier(identifier: "TrendingViewCell")
    /// Reuse identifier `TrendingViewSectionCell`.
    static let trendingViewSectionCell: Rswift.ReuseIdentifier<TrendingViewSectionCell> = Rswift.ReuseIdentifier(identifier: "TrendingViewSectionCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// en translation: %ld days ago
      ///
      /// Locales: en
      static let reviewDay = Rswift.StringResource(key: "review.day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %ld hours ago
      ///
      /// Locales: en
      static let reviewHour = Rswift.StringResource(key: "review.hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %ld minutes ago
      ///
      /// Locales: en
      static let reviewMinute = Rswift.StringResource(key: "review.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %ld weeks ago
      ///
      /// Locales: en
      static let reviewWeek = Rswift.StringResource(key: "review.week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let alertCancel = Rswift.StringResource(key: "alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Comments
      ///
      /// Locales: en
      static let detailReviewSection = Rswift.StringResource(key: "detail.review.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just now
      ///
      /// Locales: en
      static let reviewNow = Rswift.StringResource(key: "review.now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en
      static let alertConfirm = Rswift.StringResource(key: "alert.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recommendtions
      ///
      /// Locales: en
      static let detailRecommendSection = Rswift.StringResource(key: "detail.recommend.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Series Cast
      ///
      /// Locales: en
      static let detailCastSection = Rswift.StringResource(key: "detail.cast.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: So long ago
      ///
      /// Locales: en
      static let reviewMonth = Rswift.StringResource(key: "review.month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Video
      ///
      /// Locales: en
      static let detailVideoSection = Rswift.StringResource(key: "detail.video.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your Rate
      ///
      /// Locales: en
      static let detailRateSection = Rswift.StringResource(key: "detail.rate.section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %ld days ago
      ///
      /// Locales: en
      static func reviewDay(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("review.day", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.day"
        }

        let format = NSLocalizedString("review.day", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %ld hours ago
      ///
      /// Locales: en
      static func reviewHour(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("review.hour", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.hour"
        }

        let format = NSLocalizedString("review.hour", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %ld minutes ago
      ///
      /// Locales: en
      static func reviewMinute(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("review.minute", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.minute"
        }

        let format = NSLocalizedString("review.minute", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %ld weeks ago
      ///
      /// Locales: en
      static func reviewWeek(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("review.week", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.week"
        }

        let format = NSLocalizedString("review.week", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func alertCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.cancel"
        }

        return NSLocalizedString("alert.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Comments
      ///
      /// Locales: en
      static func detailReviewSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail.review.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail.review.section"
        }

        return NSLocalizedString("detail.review.section", bundle: bundle, comment: "")
      }

      /// en translation: Just now
      ///
      /// Locales: en
      static func reviewNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("review.now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.now"
        }

        return NSLocalizedString("review.now", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en
      static func alertConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.confirm"
        }

        return NSLocalizedString("alert.confirm", bundle: bundle, comment: "")
      }

      /// en translation: Recommendtions
      ///
      /// Locales: en
      static func detailRecommendSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail.recommend.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail.recommend.section"
        }

        return NSLocalizedString("detail.recommend.section", bundle: bundle, comment: "")
      }

      /// en translation: Series Cast
      ///
      /// Locales: en
      static func detailCastSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail.cast.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail.cast.section"
        }

        return NSLocalizedString("detail.cast.section", bundle: bundle, comment: "")
      }

      /// en translation: So long ago
      ///
      /// Locales: en
      static func reviewMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("review.month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "review.month"
        }

        return NSLocalizedString("review.month", bundle: bundle, comment: "")
      }

      /// en translation: Video
      ///
      /// Locales: en
      static func detailVideoSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail.video.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail.video.section"
        }

        return NSLocalizedString("detail.video.section", bundle: bundle, comment: "")
      }

      /// en translation: Your Rate
      ///
      /// Locales: en
      static func detailRateSection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail.rate.section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail.rate.section"
        }

        return NSLocalizedString("detail.rate.section", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CategoryViewSectionCell.validate()
      try _MovieHeaderView.validate()
      try _MovieInfoViewCell.validate()
      try _MovieRateViewCell.validate()
      try _MovieReviewViewCell.validate()
      try _MovieVideoCell.validate()
      try _MovieViewCell.validate()
      try _MovieViewSectionCell.validate()
      try _TrendingViewSectionCell.validate()
    }

    struct _CategoryViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryViewCell

      let bundle = R.hostingBundle
      let identifier = "CategoryViewCell"
      let name = "CategoryViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryViewCell
      }

      fileprivate init() {}
    }

    struct _CategoryViewSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategoryViewSectionCell

      let bundle = R.hostingBundle
      let identifier = "CategoryViewSectionCell"
      let name = "CategoryViewSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryViewSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryViewSectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.loadMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.loadMore' is used in nib 'CategoryViewSectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieActorCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieActorCell

      let bundle = R.hostingBundle
      let identifier = "MovieActorCell"
      let name = "MovieActorCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieActorCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieActorCell
      }

      fileprivate init() {}
    }

    struct _MovieActorSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieActorSectionCell

      let bundle = R.hostingBundle
      let identifier = "MovieActorSectionCell"
      let name = "MovieActorSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieActorSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieActorSectionCell
      }

      fileprivate init() {}
    }

    struct _MovieDetailSkeletonView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieDetailSkeletonView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MovieHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MovieHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.loadMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.loadMore' is used in nib 'MovieHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieInfoViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieInfoViewCell

      let bundle = R.hostingBundle
      let identifier = "MovieInfoViewCell"
      let name = "MovieInfoViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieInfoViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieInfoViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.arrow.down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.arrow.down' is used in nib 'MovieInfoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.play.blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.play.blue' is used in nib 'MovieInfoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.plus' is used in nib 'MovieInfoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.star.empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.star.empty' is used in nib 'MovieInfoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.star.filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.star.filled' is used in nib 'MovieInfoViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieRateViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieRateViewCell

      let bundle = R.hostingBundle
      let identifier = "MovieRateViewCell"
      let name = "MovieRateViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRateViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRateViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.star.empty2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.star.empty2' is used in nib 'MovieRateViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieRecommedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieRecommedCell

      let bundle = R.hostingBundle
      let identifier = "MovieRecommedCell"
      let name = "MovieRecommedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRecommedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRecommedCell
      }

      fileprivate init() {}
    }

    struct _MovieRecommendSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieRecommendSectionCell

      let bundle = R.hostingBundle
      let identifier = "MovieRecommendSectionCell"
      let name = "MovieRecommendSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieRecommendSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieRecommendSectionCell
      }

      fileprivate init() {}
    }

    struct _MovieReviewViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieReviewViewCell

      let bundle = R.hostingBundle
      let identifier = "MovieReviewViewCell"
      let name = "MovieReviewViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieReviewViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieReviewViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.star.empty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.star.empty' is used in nib 'MovieReviewViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon.star.filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.star.filled' is used in nib 'MovieReviewViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "color.F1CA23", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color.F1CA23' is used in nib 'MovieReviewViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color.text4A", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color.text4A' is used in nib 'MovieReviewViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color.text9B", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color.text9B' is used in nib 'MovieReviewViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MovieVideoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieVideoCell

      let bundle = R.hostingBundle
      let identifier = "MovieVideoCell"
      let name = "MovieVideoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieVideoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieVideoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.play.white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.play.white' is used in nib 'MovieVideoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieVideoSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieVideoSectionCell

      let bundle = R.hostingBundle
      let identifier = "MovieVideoSectionCell"
      let name = "MovieVideoSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieVideoSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieVideoSectionCell
      }

      fileprivate init() {}
    }

    struct _MovieViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MovieViewCell

      let bundle = R.hostingBundle
      let identifier = "MovieViewCell"
      let name = "MovieViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.detail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.detail' is used in nib 'MovieViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MovieViewSectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MovieViewSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieViewSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieViewSectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.loadMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.loadMore' is used in nib 'MovieViewSectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TrendingViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TrendingViewCell

      let bundle = R.hostingBundle
      let identifier = "TrendingViewCell"
      let name = "TrendingViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingViewCell
      }

      fileprivate init() {}
    }

    struct _TrendingViewSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrendingViewSectionCell

      let bundle = R.hostingBundle
      let identifier = "TrendingViewSectionCell"
      let name = "TrendingViewSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TrendingViewSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendingViewSectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.loadMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.loadMore' is used in nib 'TrendingViewSectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try movie.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct movie: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let movieDetailViewController = StoryboardViewControllerResource<MovieDetailViewController>(identifier: "MovieDetailViewController")
      let name = "Movie"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func movieDetailViewController(_: Void = ()) -> MovieDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon.back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon.back' is used in storyboard 'Movie', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.movie().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Movie' as 'HomeViewController'.") }
        if _R.storyboard.movie().movieDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailViewController' could not be loaded from storyboard 'Movie' as 'MovieDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
